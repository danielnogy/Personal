@using BinaryPlate.BlazorPlate.Contracts.Consumers.SSM
@using BinaryPlate.BlazorPlate.Features.SSM.MaterialCategories.Queries.GetMaterialCategoriess
@using BinaryPlate.BlazorPlate.Features.SSM.Materials.Queries.GetMaterials
@using Syncfusion.Blazor.Popups
@implements IDisposable

<SfGrid @ref="Grid" AllowTextWrap="true" AllowSelection="true" DataSource="MaterialItems">
    <GridSelectionSettings CheckboxMode="CheckboxSelectionType.ResetOnRowClick" CheckboxOnly="true" PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" Mode="Syncfusion.Blazor.Grids.SelectionMode.Row"></GridSelectionSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" MinWidth="50" Width="50"></GridColumn>
        <GridColumn Field=@nameof(MaterialItem.Id) IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
        <GridColumn Field=@nameof(MaterialItem.Title) HeaderText="Titlu"></GridColumn>
    </GridColumns>
    <GridTemplates>
        <ToolbarTemplate Context="ToolbarContext">
            <SfToolbar>
                <ToolbarEvents Clicked="ToolbarClickHandler"></ToolbarEvents>
                <ToolbarItems>
                    <ToolbarItem Type="ItemType.Input">
                        <Template>
                            <SfDropDownList TItem="MaterialCategoryItem"  FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TValue="int" DataSource="MaterialCategoryItems.OrderBy(x=>x.Name)" @bind-Value="SelectedMaterialCategoryId" Placeholder="Categorie" >
                                <DropDownListEvents TItem="MaterialCategoryItem" TValue="int" ValueChange="@(async ()=>await MaterialsLoad())"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Template>
                    </ToolbarItem>
                    <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                    <ToolbarItem  Type="ItemType.Input" Align="ItemAlign.Right">
                        <Template>
                            <SfTextBox @bind-Value="SearchText" Placeholder="Cautare cuvant/fraza cheie"  @oninput=InputHandler></SfTextBox>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </ToolbarTemplate>
    </GridTemplates>
    <GridEvents TValue="MaterialItem" DataBound="DataBound" RowSelected="OnRowSelected" RowDeselected="OnRowDeselected"></GridEvents>
</SfGrid>
<SfPager @ref="Pager" NumericItemsCount="5" TotalItemsCount=TotalItems PageSize="@PageSize" PageChanged="PageChangedHandler"></SfPager>


@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    public List<MaterialItem> SelectedMaterials { get; set; } = new();
    [Inject] private SfDialogService DialogService { get; set; }
    [Inject] public IMaterialsClient MaterialsClient { get; set; }
    [Inject] public IMaterialCategoriesClient MaterialCategoriesClient { get; set; }
    [Inject] TimerHelper TimerObject { get; set; }
    private List<MaterialItem> MaterialItems { get; set; } = new();
    private List<MaterialCategoryItem> MaterialCategoryItems { get; set; } = new();
    private SfGrid<MaterialItem> Grid { get; set; }
    private GetMaterialsQuery GetMaterialsQuery { get; set; } = new GetMaterialsQuery();
    private GetMaterialCategoriesQuery GetMaterialCategoriesQuery { get; set; } = new GetMaterialCategoriesQuery();
    private GetMaterialsResponse GetMaterialsResponse { get; set; } = new GetMaterialsResponse();
    private GetMaterialCategoriesResponse GetMaterialCategoriesResponse { get; set; } = new GetMaterialCategoriesResponse();


    public int TotalItems { get; set; } = 1;
    public int PageSize { get; set; } = 4;
    public SfPager Pager { get; set; }
    private int SelectedMaterialCategoryId { get; set; }
    private string SearchText { get; set; }

    private void OnRowSelected(RowSelectEventArgs<MaterialItem> args)
    {
        if (!SelectedMaterials.Select(x => x.Id).Contains(args.Data.Id))
        {
            SelectedMaterials.Add(args.Data);
        }
    }
    private void OnRowDeselected(RowDeselectEventArgs<MaterialItem> args)
    {
        var itemToRemove = SelectedMaterials.FirstOrDefault(x => x.Id == args.Data.Id);
        if (itemToRemove != null)
        {
            SelectedMaterials.Remove(itemToRemove);
        }
    }
    private async Task DataBound()
    {

        var idsAlreadySelected = SelectedMaterials.Select(x => x.Id);
        if (idsAlreadySelected.Count() > 0)
        {
            foreach (var item in MaterialItems)
            {
                if (idsAlreadySelected.Contains(item.Id))
                {
                    await Grid.SelectRowAsync((await Grid.GetRowIndexByPrimaryKeyAsync(item.Id)));
                }
            }
        }

    }
    private async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var selectedRecords = await Grid.GetSelectedRecordsAsync();

        if (args.Item.Id == "add")
        {

        }
    }

    protected override async Task OnInitializedAsync()
    {
        


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await MaterialCategoriesLoad();
            SelectedMaterialCategoryId = MaterialCategoryItems.Select(x => x.Id).FirstOrDefault();
            TimerObject.OnElapsed += async () =>
            {
                await MaterialsLoad();
            };
            TimerObject.SetTimer(600);            
        }
    }
    private async Task MaterialsLoad()
    {
        if (Grid != null)
            await Grid.ShowSpinnerAsync();
        while (Pager == null )
        {
            await Task.Delay(30);
        }
        PageSize = 4;

        GetMaterialsQuery.MaterialCategoryId = SelectedMaterialCategoryId;
        GetMaterialsQuery.PageNumber = Pager.CurrentPage;
        GetMaterialsQuery.RowsPerPage = Pager.PageSize;
        GetMaterialsQuery.SearchText = SearchText;
        GetMaterialsQuery.SortBy = "";
        //if we want to see selected questions
        if (SelectedMaterialCategoryId == -1)
        {
            MaterialItems = SelectedMaterials
                                .Where(x=>
                                    x.Title.Contains(!string.IsNullOrWhiteSpace(SearchText) ? SearchText : ""))
                                .ToList();
            TotalItems = SelectedMaterials.Count;
            PageSize = SelectedMaterials.Count;
            await Grid.Refresh();
            if (Grid != null)
                await Grid.HideSpinnerAsync();
            StateHasChanged();
            return;
        }
        var responseWrapper = await MaterialsClient.GetMaterials(GetMaterialsQuery);
        if (responseWrapper.IsSuccessStatusCode)
        {
            if (responseWrapper.Payload != null)
            {
                TotalItems = responseWrapper.Payload.Materials.TotalRows;
                GetMaterialsResponse = responseWrapper.Payload;
                MaterialItems = GetMaterialsResponse.Materials.Items.ToList();
                if (Grid != null)
                    await Grid.Refresh();
                StateHasChanged();

            }
        }
        if (Grid != null)
            await Grid.HideSpinnerAsync();
    }
    private async Task MaterialCategoriesLoad()
    {

        while (Pager == null)
        {
            await Task.Delay(30);
        }
        GetMaterialCategoriesQuery.RowsPerPage = -1;
        GetMaterialCategoriesQuery.SortBy = "";

        var responseWrapper = await MaterialCategoriesClient.GetMaterialCategories(GetMaterialCategoriesQuery);
        if (responseWrapper.IsSuccessStatusCode)
        {
            if (responseWrapper.Payload != null)
            {
                //TotalItems = responseWrapper.Payload.Materials.TotalRows;
                GetMaterialCategoriesResponse = responseWrapper.Payload;
                MaterialCategoryItems = GetMaterialCategoriesResponse.MaterialCategories.Items.ToList();
                MaterialCategoryItems.Add(new MaterialCategoryItem { Id = 0, Name = " Toate " });
                MaterialCategoryItems.Add(new MaterialCategoryItem { Id = -1, Name = " Selectate " });
                if (Grid != null)
                    await Grid.Refresh();
                StateHasChanged();

            }
        }
    }
    private async void PageChangedHandler(PageChangedEventArgs args)
    {
        await MaterialsLoad();
        StateHasChanged();
    }
    private async void InputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            SearchText = (string)args.Value;
            TimerObject.StopTimer();
            TimerObject.StartTimer();
        }

        
    }
    public List<MaterialItem> GetSelectedRecords()
    {
        return SelectedMaterials;
    }
    public void SetSelectedRecords(List<MaterialItem> items)
    {
        SelectedMaterials = items;
    }

    public void Dispose()
    {
        TimerObject.Dispose();
    }
}
